# cython: language_level=3


import re
import urllib3
import requests
import src.utils.generics.generic as UtilsGenerics
from config.params import ConfigConst

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class ExploitGitVuln:
    def __init__(self):
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )
        self.api_ip = ConfigConst.ApiConfig.API_IP
        self.api_port = ConfigConst.ApiConfig.API_PORT
        self.GIT_LOCATION = [
            "/.git/HEAD",
            "/doc/.git/HEAD",
            "/core/.git/HEAD",
            "/blogs/.git/HEAD",
            "/bin/.git/HEAD",
            "/vendor/.git/HEAD",
        ]

    def run(self, url, session):
        try:
            session.verify = False
            original_session = session
            session.mount(url, requests.adapters.HTTPAdapter(max_retries=3))
            for git_location in self.GIT_LOCATION:
                if self.is_valid_gitdumper_candidate(
                    f"{url.rstrip('/')}{git_location}", session
                ):
                    if self.send_to_api(f"{url.rstrip('/')}{git_location}"):
                        return True
                else:
                    pass
            return False
        except Exception as e:
            self.logger_vuln.error(
                f"ExploitGitVuln / run / error occured : {e} with url {url}"
            )
        finally:
            session = original_session

    def send_to_api(self, url):
        json = {"url": f"{url}", "vuln": "git-dumper"}
        rep = requests.post(f"http://{self.api_ip}:{self.api_port}/url/post", json=json)
        if rep.status_code == 201:
            return True
        else:
            self.logger_vuln.error(
                f"ExploitGitVuln - send_to_api / bad response api : {rep.json()}"
            )
            return False

    def verify_response(self, response):
        if response.status_code != 200:
            return False
        elif (
            "Content-Length" in response.headers
            and response.headers["Content-Length"] == 0
        ):
            return False
        elif (
            "Content-Type" in response.headers
            and "text/html" in response.headers["Content-Type"]
        ):
            return False
        else:
            return True

    def is_valid_gitdumper_candidate(self, url, session):
        try:
            response = session.get(url, allow_redirects=False, timeout=10)
            valid = self.verify_response(response)
            if not valid:
                return False
            elif not re.match(r"^(ref:.*|[0-9a-f]{40}$)", response.text.strip()):
                return False
            return True
        except requests.ConnectionError as e:
            return False
        except requests.Timeout:
            return False
        except Exception as e:
            self.logger_vuln.warning(
                f"ExploitGitVuln /  DEBUG error : {e} with url : {url}"
            )
            return False
