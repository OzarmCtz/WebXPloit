# cython: language_level=3


import threading
import requests
import mysql.connector
from urllib.parse import urlencode
from config.params import ConfigConst
import src.utils.generics.generic as UtilsGenerics
from urllib.parse import urlparse


class ProcessDatabase:
    def __init__(self):
        self.PATH_RESULT_MYSQL = ConfigConst.CommonPathConfig.RESULT_MYSQL
        self.PATH_RESULT_ADMINER = ConfigConst.CommonPathConfig.RESULT_ADMINER
        self.PATH_RESULT_PHPMYADMIN = ConfigConst.CommonPathConfig.RESULT_PHPMYADMIN
        self.file_lock = threading.Lock()
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )

    def run(self, host, user, password, database, port, url, session):
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname

        mysql_working = self.connect_to_mysql(host, user, password, database, port)
        if mysql_working:
            return True

        phpmyadmin_working = self.connect_to_phpmyadmin(
            hostname, user, password, session
        )
        if phpmyadmin_working:
            return True

        adminer_working = self.connect_to_adminer(
            hostname, user, password, database, session
        )
        if adminer_working:
            return True

        return False

    def connect_to_mysql(self, host, user, password, database, port):
        connection = None
        cursor = None
        try:
            connection = mysql.connector.connect(
                host=host, user=user, password=password, database=database, port=port
            )
            cursor = connection.cursor()

            cursor.execute("SHOW TABLES;")

            tables = cursor.fetchall()
            if tables:
                UtilsGenerics.push_result(
                    self,
                    self.PATH_RESULT_MYSQL,
                    f"{host} | {user} | {password} | {database} | {port} | {len(tables)} Tables founded |  Checked : False | {UtilsGenerics.ret_hour()}\n",
                )
                return True

            return False
        except mysql.connector.Error:
            return False
        except Exception as e:
            self.logger_vuln.error(f"ProcessDatabase - connect_to_mysql error : {e}")
            return False
        finally:
            if cursor:
                cursor.close()
            if connection:
                connection.close()

    def connect_to_adminer(self, url, username, password, database, session):
        try:
            header_post = {
                "Pragma": "no-cache",
                "Accept": "*/*",
                "Content-Type": "application/x-www-form-urlencoded",
                "User-Agent": session.headers.get("User-Agent"),
            }

            response_post = requests.post(
                f"https://{url}/adminer.php",
                headers=header_post,
                data=urlencode(
                    {
                        "auth[driver]": "server",
                        "auth[server]": "",
                        "auth[username]": username,
                        "auth[password]": password,
                        "auth[db]": database,
                    }
                ),
                allow_redirects=True,
            )
            if f"Database: {database} - Adminer" in response_post.text:
                UtilsGenerics.push_result(
                    self,
                    self.PATH_RESULT_ADMINER,
                    f"https://{url}/adminer.php | {username} | {password} | {database} | Checked : False | {UtilsGenerics.ret_hour()}\n",
                )
                return True
            else:
                return False
        except requests.exceptions.RequestException as e:
            return False
        except Exception as e:
            self.logger_vuln.error(f"ProcessDatabase - connect_to_adminer error : {e}")
            return False

    def connect_to_phpmyadmin(self, url, username, password, session):
        try:
            header_get = {
                "Pragma": "no-cache",
                "Accept": "*/*",
                "User-Agent": session.headers.get("User-Agent"),
            }

            reponse = requests.get(f"https://{url}/phpmyadmin", headers=header_get)
            if "phpmyadmin.net" in reponse.text:
                soup = UtilsGenerics.parse_content(self, reponse.text, url)
                if soup is None:
                    return False
                token = soup.find("input", {"name": "token"})["value"]

                header_post = {
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image avif,image/webp,image/apng,*/*;q=0.8",
                    "Accept-Language": "en-US,en;q=0.5",
                    "Cache-Control": "no-cache",
                    "Content-Length": "159",
                    "Content-Type": "application/x-www-form-urlencoded",
                    "Origin": "null",
                    "Pragma": "no-cache",
                    "Sec-Ch-Ua": 'Chromium";v="118", "Brave";v="118", "Not=A?Brand";v="99',
                    "Sec-Ch-Ua-Mobile": "?0",
                    "Sec-Ch-Ua-Platform": '"Windows"',
                    "Sec-Fetch-Dest": "document",
                    "Sec-Fetch-Mode": "navigate",
                    "Sec-Fetch-Site": "same-origin",
                    "Sec-Fetch-User": "?1",
                    "Sec-Gpc": "1",
                    "Upgrade-Insecure-Requests": "1",
                    "User-Agent": session.headers.get("User-Agent"),
                }

                reponse_post = requests.post(
                    f"https://{url}/phpmyadmin/index.php?route=/",
                    headers=header_post,
                    data=urlencode(
                        {
                            "set_session": reponse.cookies.get("phpMyAdmin_https"),
                            "pma_username": username,
                            "pma_password": password,
                            "server": "1",
                            "route": "/",
                            "token": token,
                        }
                    ),
                    cookies=reponse.cookies,
                    allow_redirects=False,
                    timeout=15,
                )
                if reponse_post.status_code == 302:
                    UtilsGenerics.push_result(
                        self,
                        self.PATH_RESULT_PHPMYADMIN,
                        f"https://{url}/phpmyadmin/index.php?route=/ | {username} | {password} | Checked : False | {UtilsGenerics.ret_hour()}\n",
                    )
                    return True
            else:
                return False
        except requests.exceptions.RequestException as e:
            return False
        except Exception as e:
            self.logger_vuln.error(
                f"ProcessDatabase - connect_to_phpmyadmin error : {e}"
            )
            return False
