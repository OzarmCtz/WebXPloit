# cython: language_level=3


import threading
import boto3
import botocore
from config.params import ConfigConst
import src.utils.generics.generic as UtilsGenerics


class ProccessAwsKey:
    def __init__(self):
        self.logger = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )
        self.file_lock = threading.Lock()
        self.RESULT_AWS_KEY = ConfigConst.CommonPathConfig.RESULT_AWS_KEY

    def run(self, akia_key, akia_password, region, url):
        return self.check_aws_credentials(akia_key, akia_password, region, url)

    def check_aws_credentials(self, akia_key, akia_password, region, url):
        region_process = region
        if region_process == "Unknow":
            region_process = "us-east-2"

        session = boto3.Session(
            aws_access_key_id=akia_key, aws_secret_access_key=akia_password
        )
        try:
            # Vérifier STS
            sts = session.client("sts")
            sts.get_caller_identity()["Account"]

            # Tenter de créer un client SESV2
            try:
                client = session.client("sesv2", region_name=region_process)
                client.get_account()
                UtilsGenerics.push_result(
                    self,
                    self.RESULT_AWS_KEY,
                    f"{akia_key} | {akia_password} | {region} | Checked : False | {UtilsGenerics.ret_hour()}\n",
                )
                return True
            except Exception as e:
                return False
        except botocore.exceptions.ClientError as e:
            # Clé invalide
            if e.response["Error"]["Code"] != "SignatureDoesNotMatch":
                self.logger.warning(
                    f"CheckAwsKeyAndSes error occurred : {e} / with url : {url}"
                )
            return False
