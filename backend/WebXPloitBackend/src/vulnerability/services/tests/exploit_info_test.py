# cython: language_level=3


import unittest
import requests

from src.vulnerability.services.exploit_info import ExploitInfo


# Requirments : Mysql 127.0.0.1 Open with wxplt db with 2 tables.
# Smtp valid


class TestExploitInfo(unittest.TestCase):
    def test_with_valide_json_db(self):
        # DB VALID IN JSON
        valid_json = {
            "database": [
                {
                    "db username": "root",
                    "db password": "",
                    "db name": "wxplt",
                    "db host": "127.0.0.1",
                    "db port": "3306",
                    "db connection": "MYSQL",
                }
            ],
            "smtp": [
                {
                    "smtp host": "<placeholder>",
                    "smtp username": "<placeholder>",
                    "smtp password": "<placeholder>",
                    "smtp port": "<optional_placeholder>",
                    "additional_smtp_info_1": "<optional_placeholder>",
                    "additional_smtp_info_2": "<optional_placeholder>",
                }
            ],
            "aws": [
                {
                    "aws key id": "<placeholder>",
                    "aws secret key": "<placeholder>",
                    "aws region": "<optional_placeholder>",
                }
            ],
            "mailgun": [
                {
                    "mailgun secret": "<optional_placeholder>",
                    "mailgun smtp username": "<optional_placeholder>",
                    "mailgun smtp password": "<optional_placeholder>",
                }
            ],
            "twilio": [
                {"twilio sid": "<placeholder>", "twilio token": "<placeholder>"}
            ],
        }
        sessions = requests.session()
        url = "http://localhost"
        url_vuln = "http://localhost/.env"
        self.assertEqual(
            ExploitInfo().run(valid_json, url, url_vuln, sessions),
            True,
        )

    def test_with_valide_json_smtp(self):
        # SMTP VALID IN JSON
        valid_json = {
            "database": [
                {
                    "db username": "",
                    "db password": "",
                    "db name": "",
                    "db host": "",
                    "db port": "",
                    "db connection": "",
                }
            ],
            "smtp": [
                {
                    "smtp host": "smtp.office365.com",
                    "smtp username": "emision@unityseguros.com",
                    "smtp password": "0DIbQyRE0JG*",
                    "smtp port": "587>",
                    "additional_smtp_info_1": "<optional_placeholder>",
                    "additional_smtp_info_2": "<optional_placeholder>",
                }
            ],
            "aws": [
                {
                    "aws key id": "<placeholder>",
                    "aws secret key": "<placeholder>",
                    "aws region": "<optional_placeholder>",
                }
            ],
            "mailgun": [
                {
                    "mailgun secret": "<optional_placeholder>",
                    "mailgun smtp username": "<optional_placeholder>",
                    "mailgun smtp password": "<optional_placeholder>",
                }
            ],
            "twilio": [
                {"twilio sid": "<placeholder>", "twilio token": "<placeholder>"}
            ],
        }
        sessions = requests.session()
        url = "http://localhost"
        url_vuln = "http://localhost/.env"
        self.assertEqual(
            ExploitInfo().run(valid_json, url, url_vuln, sessions),
            True,
        )

    def test_with_invalide_json_(self):
        # DB VALID IN JSON
        invalid_json = {
            "database": [
                {
                    "db username": "",
                    "db password": "",
                    "db name": "",
                    "db host": "",
                    "db port": "",
                    "db connection": "",
                }
            ],
            "smtp": [
                {
                    "smtp host": "<placeholder>",
                    "smtp username": "<placeholder>",
                    "smtp password": "<placeholder>",
                    "smtp port": "<optional_placeholder>",
                    "additional_smtp_info_1": "<optional_placeholder>",
                    "additional_smtp_info_2": "<optional_placeholder>",
                }
            ],
            "aws": [
                {
                    "aws key id": "<placeholder>",
                    "aws secret key": "<placeholder>",
                    "aws region": "<optional_placeholder>",
                }
            ],
            "mailgun": [
                {
                    "mailgun secret": "<optional_placeholder>",
                    "mailgun smtp username": "<optional_placeholder>",
                    "mailgun smtp password": "<optional_placeholder>",
                }
            ],
            "twilio": [{"twilio sid": "", "twilio token": ""}],
        }
        sessions = requests.session()
        url = "http://localhost"
        url_vuln = "http://localhost/.env"
        self.assertEqual(
            ExploitInfo().run(invalid_json, url, url_vuln, sessions),
            False,
        )


if __name__ == "__main__":
    unittest.main()
