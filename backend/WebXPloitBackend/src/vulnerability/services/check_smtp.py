# cython: language_level=3


import json
import smtplib
import ssl

import requests
import src.utils.generics.generic as UtilsGenerics

from config.params import ConfigConst
import threading


class ProcessSmtp:
    def __init__(self):
        self.RESULT_SMTP_PATH = ConfigConst.CommonPathConfig.RESULT_SMTP
        self.file_lock = threading.Lock()
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )

    def run(self, smtphost, smtpport, smtpuser, smtppass):
        emailssl = ssl.create_default_context()
        emailssl.check_hostname = False
        emailssl.verify_mode = ssl.CERT_NONE
        try:
            # Connect to SMTP and authenticate:
            if smtpport == 465:
                # For SSL connection
                with smtplib.SMTP_SSL(
                    smtphost, smtpport, timeout=60.0, context=emailssl
                ) as server:
                    server.login(smtpuser, smtppass)
            else:
                # For non-SSL connection, with an attempt to start TLS
                with smtplib.SMTP(smtphost, smtpport, timeout=60.0) as server:
                    server.ehlo()
                    if server.has_extn("STARTTLS"):
                        server.starttls(context=emailssl)
                        server.ehlo()
                    server.login(smtpuser, smtppass)
            UtilsGenerics.push_result(
                self,
                self.RESULT_SMTP_PATH,
                f"{smtphost} | {smtpport} | {smtpuser} | {smtppass} | Checked : False | {UtilsGenerics.ret_hour()}\n",
            )
            return True
        except Exception as e:
            self.logger_vuln.error(
                f'ProcessSmtp / error occured with : f"{smtphost} | {smtpport} | {smtpuser} | {smtppass} / {e}"'
            )
            return False


class ProcessMailgunSecretKey:
    def __init__(self):
        self.RESULT_MAIGUN_PATH = ConfigConst.CommonPathConfig.RESULT_MAILGUN_KEY
        self.file_lock = threading.Lock()
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )

    def run(self, apikey):
        auth = ("api", f"{apikey}")
        response = requests.get("https://api.mailgun.net/v3/domains", auth=auth)
        json_output = json.dumps(response.json(), indent=4)
        dict_from_json = json.loads(json_output)
        message = dict_from_json.get("message", "")
        if "Invalid private key" in message:
            return False
        else:
            UtilsGenerics.push_result(
                self,
                self.RESULT_MAIGUN_PATH,
                f"{apikey} | Checked : False | {UtilsGenerics.ret_hour()}\n",
            )
            return True


class ProcessTwilioApi:
    def __init__(self):
        self.RESULT_TWILIO_PATH = ConfigConst.CommonPathConfig.RESULT_TWILIO_KEY
        self.file_lock = threading.Lock()
        self.logger_vuln = UtilsGenerics.setup_logging(
            logger_name=f"{ConfigConst.LoggingConfig.LOGGER_VULN_NAME}",
            log_file=ConfigConst.LoggingConfig.VULN_LOG_FILE_PATH,
        )

    def run(self, account_sid, auth_token):
        UtilsGenerics.push_result(
            self,
            self.RESULT_TWILIO_PATH,
            f"{account_sid} | {auth_token} | Checked : False | {UtilsGenerics.ret_hour()}\n",
        )
